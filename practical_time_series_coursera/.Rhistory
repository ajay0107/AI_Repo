rPartial <- acf(ar_process, type = "partial")
R_matrix <- matrix(data=1,2,2)
R_matrix[1,2] <- r[2]
R_matrix[2,1] <- r[3]
r[2]
r[3]
r$acf[2]
set.seed(2017)
n <- 10000
ar_process=arima.sim(n,model = list(ar=c(1/3,1/2)),sd=4)
r <- acf(ar_process)
rPartial <- acf(ar_process, type = "partial")
R_matrix <- matrix(data=1,2,2)
R_matrix[1,2] <- r$acf[2]
R_matrix[2,1] <- r$acf[3]
R_matrix
B <- matrix(data = c(r$acf[2],r$acf[3]),ncol = 1,nrow = 2)
B
solve(R,B)
solve(R_matrix,B)
c0 <- acf(ar_process,type = "covariance")
c0
rho <- solve(R_matrix,B)
rho
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1])
coeff <- solve(R_matrix,B)
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1])
sdSquared
set.seed(2017)
n <- 10000
ar_process=arima.sim(n,model = list(ar=c(1/3,1/2)),sd=4)
r <- acf(ar_process)
rPartial <- acf(ar_process, type = "partial")
R_matrix <- matrix(data=1,2,2)
R_matrix[1,2] <- r$acf[2]
R_matrix[2,1] <- r$acf[3]
B <- matrix(data = c(r$acf[2],r$acf[3]),ncol = 1,nrow = 2)
coeff <- solve(R_matrix,B)
c0 <- acf(ar_process,type = "covariance")
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1])
sdSquared
ar_process=arima.sim(n,model = list(ar=c(1/3,1/2,7/100)),sd=4)
r <- acf(ar_process)
set.seed(2017)
n <- 10000
ar_process=arima.sim(n,model = list(ar=c(1/3,1/2,7/100)),sd=4)
r <- acf(ar_process)
rPartial <- acf(ar_process, type = "partial")
R_matrix <- matrix(data=1,3,3)
R_matrix
R=matrix(1,3,3)
R[1,2]=r[1]
R[1,3]=r[2]
R[2,1]=r[1]
R[2,3]=r[1]
R[3,1]=r[2]
R[3,2]=r[1]
R
r[1]
R[1,2]=r$acf[1]
set.seed(2017)
n <- 10000
ar_process=arima.sim(n,model = list(ar=c(1/3,1/2,7/100)),sd=4)
r <- acf(ar_process)
rPartial <- acf(ar_process, type = "partial")
R=matrix(1,3,3)
R[1,2]=r$acf[1]
R[1,3]=r$acf[2]
R[2,1]=r$acf[1]
R[2,3]=r$acf[1]
R[3,1]=r$acf[2]
R[3,2]=r$acf[1]
R
# b-column vector on the right
b=matrix(,3,1)# b- column vector with no entries
b[1,1]=r$acf[1]
b[2,1]=r$acf[2]
b[3,1]=r$acf[3]
b
# b-column vector on the right
b=matrix(1,3,1)# b- column vector with no entries
b[1,1]=r$acf[1]
b[2,1]=r$acf[2]
b[3,1]=r$acf[3]
b
coeff <- solve(R,b)
coeff
c0 <- acf(ar_process,type = "covariance")
phi.hat=solve(R,b)
phi.hat
# sigme estimation
c0=acf(ar3.process, type='covariance', plot=F)$acf[1]
var.hat=c0*(1-sum(phi.hat*r))
var.hat
c0=acf(ar_process, type='covariance', plot=F)$acf[1]
var.hat=c0*(1-sum(phi.hat*r))
var.hat
coeff <- solve(R,b)
coeff
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1]-coeff[3,1]*r$acf[3,1])
r$acf[3,1]
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1]-coeff[3,1]*r$acf[4])
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1]-coeff[3,1]*r$acf[4])
r
r$acf[4]
coeff[3,1]
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1]-
coeff[3,1]*r$acf[4])
c0 <- acf(ar_process,type = "covariance")
sdSquared<- c0$acf[1]*(1-r$acf[2]*coeff[1,1]-r$acf[3]*coeff[2,1]-
coeff[3,1]*r$acf[4])
sdSquared
# fit AR(p) process to time series data and find its parameters
myData <- rec
plot(myData, main="Recruitment time series",col="blue",lwd=1.5)
myData
# substracting mean to get time series with mean zero
arProcess <- myData-mean(myData)
arProcess
arProcess
myData <- rec
plot(myData, main="Recruitment time series",col="blue",lwd=1.5)
# substracting mean to get time series with mean zero
arProcess <- myData-mean(myData)
# ACF and PACF of AR process
par(mfrow=c(3,1))
acfmodel <- acf(arProcess, main="ACF recruitment", col="red", lwd=2)
pacfModel <- acf(arProcess,type = "partial",main="PACF recruitment", col="green", lwd=2)
myData <- rec
# substracting mean to get time series with mean zero
arProcess <- myData-mean(myData)
# ACF and PACF of AR process
par(mfrow=c(3,1))
plot(myData, main="Recruitment time series",col="blue",lwd=1.5)
acfmodel <- acf(arProcess, main="ACF recruitment", col="red", lwd=2)
pacfModel <- acf(arProcess,type = "partial",main="PACF recruitment", col="green", lwd=2)
acfmodel
acfmodel$acf
# order
p=2
# ACFs
acfVec <- vector()
acfVec[1:p] <- acfmodel$acf[2:p+1]
acfVec
acfVec <- vector()
acfVec[1:p] <- acfmodel$acf[1:p+1]
acfVec
p+1
acfmodel$acf[2:p+1]
acfmodel$acf[1:p+1]
acfVec <- vector()
acfVec[1:p] <- acfmodel$acf[1:p+1]
cfmodel$acf
acfmodel$acf
acfmodel$acf[3]
acfmodel$acf[1]
acfmodel$acf[2]
1:p+1
1:p
2:5
1:(p+1)
2:(p+1)
acfVec <- vector()
acfVec[1:p] <- acfmodel$acf[2:(p+1)]
acfVec
# defining Matrix-R
RMatrix <- matrix(1,p,p)
RMatrix
acfVec
for (i in 1:p) {
for (j in 1:p) {
if (i!=j) {
RMatrix[i,j] <- acfVec[abs(i-j)]
}
}
}
RMatrix
# b vector
b <- vector()
b <- matrix(acfVec,p,1)
b
acfVec
coeffNew <- solve(RMatrix,b)
coeffNew
c0 <- acf(arProcess, type = "covarience")
c0 <- acf(arProcess, type = "covariance")
c0
c0 <- c0$acf
c0
c0 <- acf(arProcess, type = "covariance")
c0 <- c0$acf[1]
c0
coeffNew
acfVec
coeffNew*acfVec
coeffNew*matrix(data = acfVec,nrow = 2, ncol = 1)
matrix(data = acfVec,nrow = 2, ncol = 1)
coeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew
matrix(data = acfVec,nrow = 1, ncol = 2)
oeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew %*% matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew
matrix(data = acfVec,nrow = 1, ncol = 2)
t(coeffNew)
matrix(data = acfVec,nrow = 2, ncol = 1)
t(coeffNew) %*% matrix(data = acfVec,nrow = 2, ncol = 1)
varHat <- c0*(1-t(coeffNew) %*% matrix(data = acfVec,nrow = 2, ncol = 1))
varHat
phi.hat
acfVec
# getting constant term
phi0Hat <- mean(myData)*(1-sum(acfVec))
phi0Hat
acfVec
# getting constant term
phi0Hat <- mean(myData)*(1-sum(coeffNew))
phi0Hat
# Johnson & Johnson-model fitting
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
plot(myData, main="Recruitment time series",col="blue",lwd=1.5)
plot(myData, main="Recruitment time series",col="blue",lwd=3)
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
data("JohnsonJohnson")
par(mfrow=c(3,1))
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",col="magenta")
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="yellow")
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
par(mfrow=c(3,1))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="yellow")
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
par(mfrow=c(3,1))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="magenta")
# we will try to fit AR(4) model here
arProcessJohnson <- logReturn-mean(logReturn)
arProcessJohnson
class(logReturn)
par(mfrow=c(2,1))
acfjohnsonMeanZero <- acf(arProcessJohnson, main="ACF johnson mean zero",
col="red",lwd=3)
pacfjohnsonMeanZero <- acf(arProcessJohnson,type="partial",main="PACF johnson mean zero",
col="green",lwd=3)
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
johnsonAcfs
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson <- johnsonAcfs[abs(j-1)]
}
}
}
Rjohnson
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson[i,j] <- johnsonAcfs[abs(i-j)]
}
}
}
Rjohnson
b=jmatrix(johnsonAcfs,p,1)
b=matrix(johnsonAcfs,p,1)
b
bjohnson=matrix(johnsonAcfs,p,1)
bjohnson
coeffJohnson <- solve(Rjohnson,bjohnson)
coeffJohnson
johnsonAcfs
johnsonAcfs <- acfjohnsonMeanZero$acf[2:(p+1)]
johnsonAcfs
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson[i,j] <- johnsonAcfs[abs(i-j)]
}
}
}
Rjohnson
bjohnson=matrix(johnsonAcfs,p,1)
coeffJohnson <- solve(Rjohnson,bjohnson)
coeffJohnson
acf(arProcessJohnson,type = "covariance",plot = F)$acf
# variance estimation
c0 <- acf(arProcessJohnson,type = "covariance",plot = F)$acf[1]
c0
varjohnson <- c0*(1-sum(coeffJohnson*johnsonAcfs))
varjohnson
# constant term
phi0johnson <- mean(logReturn)*(1-sum(coeffJohnson))
phi0johnson
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
data
par(mfrow=c(phi1,phi2))
par(mfrow=c(phi1,phi2))
phi1 <- 0.7
phi2 <- -0.2
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
par(mfrow=c(phi1,phi2))
par(mfrow=c(phi1,phi2))
phi1 <- 0.7
phi2 <- -0.2
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
par(mfrow=c(2,1))
acfSim <- acf(data, main="ACF of AR(2) process")
pacfSim <- acf(data,type = "partial",main="ACF of AR(2) process")
?arima
# using arima function to know coefficients of AR process
arimaModel <- arima(data, order = c(2,0,0),include.mean = F)
arimaModel
arimaModel$aic
arimaModel$residuals
sum(resid(arimaModel)^2)
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:50) {
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:50) {
print(p)
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:20) {
print(p)
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
View(df)
?plot
plot(x=df$ar_order,y=df$aic, col="red")
plot(x=df$ar_order,y=df$aic, fill="red")
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
library(ggplot2)
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = 1))
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
ggplot(mtcars, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
ggplot(df, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
par(mfrow=c(2,1))
ggplot(df, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
par(mfrow=c(2,1))
plot(x=df$ar_order, y=df$aic, col="red")
plot(x=df$ar_order, y=df$sse, col="blue")
?arima.sim
# simluating data of ARMA(p,q)
dataArma <- arima.sim(list(order=c(1,0,1),ar=0.7,ma=0.2),n=1000000)
dataArma
set.seed(500)
dataArma <- arima.sim(list(order=c(1,0,1),ar=0.7,ma=0.2),n=1000000)
par(mfcol=c(3,1))
set.seed(500)
phi1 <- 0.7
phi2 <- 0.2
dataArma <- arima.sim(list(order=c(1,0,1),ar=phi1,ma=phi2),n=1000000)
par(mfcol=c(3,1))
plot(data,main="ARMA(1,1)")
acfArma <- acf(data,main="ACF of ARMA(1,1)")
pacfArma <- acf(data, main="PACF of ARMA(1,1)")
set.seed(500)
phi1 <- 0.7
phi2 <- 0.2
dataArma <- arima.sim(list(order=c(1,0,1),ar=phi1,ma=phi2),n=1000000)
par(mfcol=c(3,1))
plot(data,main="ARMA(1,1)",xlim=c(0,400))
acfArma <- acf(data,main="ACF of ARMA(1,1)")
pacfArma <- acf(data,type = "partial",main="PACF of ARMA(1,1)")
# estimate coefficients of ARMA models
data("discoveries")
discoveries
plot(discoveries,main="Discoveries")
stripchart(discoveries,method = "stack",offset = 0.5,at=0.15,
pch=19,main="Number of discoveries dotplot",
xlab="number of discoveries in year",
ylab="frequency")
stripchart(discoveries,method = "stack",offset = 0.5,at=0.15,
pch=19,main="Number of discoveries dotplot",
xlab="number of discoveries in year",
ylab="frequency")
par(mfrow=c(2,1))
acfdiscoveries <- acf(discoveries, main="acf discoveries", col="red", lwd=3)
acfdiscoveries <- acf(discoveries,type = "partial",main="acf discoveries", col="blue", lwd=3)
?arima
:3
0:3
p=1
q=1
arimamodelDis <- arima(discoveries, order = c(p,0,q))
arimamodelDis
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order(p)","ma_order(q)","aic")
count <- 1
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order(p)","ma_order(q)","aic")
count <- 1
for (p in 0:3) {
for (q in 0:3) {
arimamodelDis <- arima(discoveries, order = c(p,0,q))
df$aic[count] <- arimamodelDis$aic
df$`ar_order(p)`[count] <- p
df$`ma_order(q)`[count] <- q
count <- count+1
}
}
View(df)
# install.packages("faraway")
# install.packages("astsa")
# install.packages("tseries")
# install.packages("isdals")
# install.packages("ppcor")
install.packages("forecast")
?auto.arima
library(forecast) # auto.arima()
?auto.arima
# automatic function which gives best model
auto.arima(discoveries,approximation = F)
# automatic function which gives best model
auto.arima(discoveries,d=0,approximation = F)
# select the p,q for which we have lowest AIC
# automatic function which gives best model
auto.arima(discoveries,d=0,ic="bic",approximation = F)
auto.arima(discoveries,d=0,ic="bic",approximation = T)
auto.arima(discoveries,d=0,ic="aic",approximation = T)
auto.arima(discoveries,d=0,ic="aic",approximation = F)
?auto.arima
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.csv")
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.xlsx")
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.xlsx")
data
class(data)
# fitting ARIMA model
data <- as.data.frame(readxl::read_xlsx(path = "female_births_california.xlsx"))
head(data)
class(data$Date)
tail(data)
plot(data$Date,data$`Daily total female births in California, 1959`,
main = "female births california")
plot(data$Date,data$`Daily total female births in California, 1959`, type = "l",
main = "female births california")
