c0
c0 <- acf(arProcess, type = "covariance")
c0 <- c0$acf[1]
c0
coeffNew
acfVec
coeffNew*acfVec
coeffNew*matrix(data = acfVec,nrow = 2, ncol = 1)
matrix(data = acfVec,nrow = 2, ncol = 1)
coeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew
matrix(data = acfVec,nrow = 1, ncol = 2)
oeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew*matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew %*% matrix(data = acfVec,nrow = 1, ncol = 2)
coeffNew
matrix(data = acfVec,nrow = 1, ncol = 2)
t(coeffNew)
matrix(data = acfVec,nrow = 2, ncol = 1)
t(coeffNew) %*% matrix(data = acfVec,nrow = 2, ncol = 1)
varHat <- c0*(1-t(coeffNew) %*% matrix(data = acfVec,nrow = 2, ncol = 1))
varHat
phi.hat
acfVec
# getting constant term
phi0Hat <- mean(myData)*(1-sum(acfVec))
phi0Hat
acfVec
# getting constant term
phi0Hat <- mean(myData)*(1-sum(coeffNew))
phi0Hat
# Johnson & Johnson-model fitting
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
plot(myData, main="Recruitment time series",col="blue",lwd=1.5)
plot(myData, main="Recruitment time series",col="blue",lwd=3)
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
data("JohnsonJohnson")
par(mfrow=c(3,1))
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",col="magenta")
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="yellow")
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
par(mfrow=c(3,1))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="yellow")
data("JohnsonJohnson")
plot(JohnsonJohnson, main ="johnson and johnson quarterly earnings",
col="blue",lwd=2)
# mean is changing (increasing) and variance is changing
# we can't fit a stationary AR model on this data, we have to transform this dataset
# one such famous transformation is log return of time series, which makes it stationary time series
logReturn <- diff(log(JohnsonJohnson))
par(mfrow=c(3,1))
plot(logReturn, main ="johnson and johnson dataset log return",
col="red",lwd=2)
acfjohnson <- acf(logReturn,main="ACF johnson",col="green")
pacfjohnson <- acf(logReturn, type = "partial",main="PACF johnson",
col="magenta")
# we will try to fit AR(4) model here
arProcessJohnson <- logReturn-mean(logReturn)
arProcessJohnson
class(logReturn)
par(mfrow=c(2,1))
acfjohnsonMeanZero <- acf(arProcessJohnson, main="ACF johnson mean zero",
col="red",lwd=3)
pacfjohnsonMeanZero <- acf(arProcessJohnson,type="partial",main="PACF johnson mean zero",
col="green",lwd=3)
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
johnsonAcfs
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson <- johnsonAcfs[abs(j-1)]
}
}
}
Rjohnson
p <- 4
johnsonAcfs <- acfjohnsonMeanZero$acf
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson[i,j] <- johnsonAcfs[abs(i-j)]
}
}
}
Rjohnson
b=jmatrix(johnsonAcfs,p,1)
b=matrix(johnsonAcfs,p,1)
b
bjohnson=matrix(johnsonAcfs,p,1)
bjohnson
coeffJohnson <- solve(Rjohnson,bjohnson)
coeffJohnson
johnsonAcfs
johnsonAcfs <- acfjohnsonMeanZero$acf[2:(p+1)]
johnsonAcfs
Rjohnson <- matrix(data = 1, nrow = p,ncol = p)
for (i in 1:p) {
for (j in 1:p) {
if(i!=j){
Rjohnson[i,j] <- johnsonAcfs[abs(i-j)]
}
}
}
Rjohnson
bjohnson=matrix(johnsonAcfs,p,1)
coeffJohnson <- solve(Rjohnson,bjohnson)
coeffJohnson
acf(arProcessJohnson,type = "covariance",plot = F)$acf
# variance estimation
c0 <- acf(arProcessJohnson,type = "covariance",plot = F)$acf[1]
c0
varjohnson <- c0*(1-sum(coeffJohnson*johnsonAcfs))
varjohnson
# constant term
phi0johnson <- mean(logReturn)*(1-sum(coeffJohnson))
phi0johnson
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
data
par(mfrow=c(phi1,phi2))
par(mfrow=c(phi1,phi2))
phi1 <- 0.7
phi2 <- -0.2
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
par(mfrow=c(phi1,phi2))
par(mfrow=c(phi1,phi2))
phi1 <- 0.7
phi2 <- -0.2
data <- arima.sim(list(ar=c(phi1,phi2)),n=2000)
par(mfrow=c(2,1))
acfSim <- acf(data, main="ACF of AR(2) process")
pacfSim <- acf(data,type = "partial",main="ACF of AR(2) process")
?arima
# using arima function to know coefficients of AR process
arimaModel <- arima(data, order = c(2,0,0),include.mean = F)
arimaModel
arimaModel$aic
arimaModel$residuals
sum(resid(arimaModel)^2)
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:50) {
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:50) {
print(p)
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order","aic","sse")
for (p in 1:20) {
print(p)
arimaModel <- arima(data, order = c(p,0,0),include.mean = F)
df$ar_order[p] <- p
df$aic[p] <- arimaModel$aic
df$sse[p] <- sum(resid(arimaModel)^2)
}
View(df)
?plot
plot(x=df$ar_order,y=df$aic, col="red")
plot(x=df$ar_order,y=df$aic, fill="red")
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
library(ggplot2)
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = 1))
ggplot(mtcars, aes(x = df$ar_order, y = df$aic)) +
geom_point(aes(color = "red"))
ggplot(mtcars, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
ggplot(df, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
par(mfrow=c(2,1))
ggplot(df, aes(x=df$ar_order, y=df$aic)) +
geom_point(shape=18, color="blue")
par(mfrow=c(2,1))
plot(x=df$ar_order, y=df$aic, col="red")
plot(x=df$ar_order, y=df$sse, col="blue")
?arima.sim
# simluating data of ARMA(p,q)
dataArma <- arima.sim(list(order=c(1,0,1),ar=0.7,ma=0.2),n=1000000)
dataArma
set.seed(500)
dataArma <- arima.sim(list(order=c(1,0,1),ar=0.7,ma=0.2),n=1000000)
par(mfcol=c(3,1))
set.seed(500)
phi1 <- 0.7
phi2 <- 0.2
dataArma <- arima.sim(list(order=c(1,0,1),ar=phi1,ma=phi2),n=1000000)
par(mfcol=c(3,1))
plot(data,main="ARMA(1,1)")
acfArma <- acf(data,main="ACF of ARMA(1,1)")
pacfArma <- acf(data, main="PACF of ARMA(1,1)")
set.seed(500)
phi1 <- 0.7
phi2 <- 0.2
dataArma <- arima.sim(list(order=c(1,0,1),ar=phi1,ma=phi2),n=1000000)
par(mfcol=c(3,1))
plot(data,main="ARMA(1,1)",xlim=c(0,400))
acfArma <- acf(data,main="ACF of ARMA(1,1)")
pacfArma <- acf(data,type = "partial",main="PACF of ARMA(1,1)")
# estimate coefficients of ARMA models
data("discoveries")
discoveries
plot(discoveries,main="Discoveries")
stripchart(discoveries,method = "stack",offset = 0.5,at=0.15,
pch=19,main="Number of discoveries dotplot",
xlab="number of discoveries in year",
ylab="frequency")
stripchart(discoveries,method = "stack",offset = 0.5,at=0.15,
pch=19,main="Number of discoveries dotplot",
xlab="number of discoveries in year",
ylab="frequency")
par(mfrow=c(2,1))
acfdiscoveries <- acf(discoveries, main="acf discoveries", col="red", lwd=3)
acfdiscoveries <- acf(discoveries,type = "partial",main="acf discoveries", col="blue", lwd=3)
?arima
:3
0:3
p=1
q=1
arimamodelDis <- arima(discoveries, order = c(p,0,q))
arimamodelDis
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order(p)","ma_order(q)","aic")
count <- 1
df <- as.data.frame(matrix(data = NA, nrow = 5000,ncol = 3))
colnames(df) <- c("ar_order(p)","ma_order(q)","aic")
count <- 1
for (p in 0:3) {
for (q in 0:3) {
arimamodelDis <- arima(discoveries, order = c(p,0,q))
df$aic[count] <- arimamodelDis$aic
df$`ar_order(p)`[count] <- p
df$`ma_order(q)`[count] <- q
count <- count+1
}
}
View(df)
# install.packages("faraway")
# install.packages("astsa")
# install.packages("tseries")
# install.packages("isdals")
# install.packages("ppcor")
install.packages("forecast")
?auto.arima
library(forecast) # auto.arima()
?auto.arima
# automatic function which gives best model
auto.arima(discoveries,approximation = F)
# automatic function which gives best model
auto.arima(discoveries,d=0,approximation = F)
# select the p,q for which we have lowest AIC
# automatic function which gives best model
auto.arima(discoveries,d=0,ic="bic",approximation = F)
auto.arima(discoveries,d=0,ic="bic",approximation = T)
auto.arima(discoveries,d=0,ic="aic",approximation = T)
auto.arima(discoveries,d=0,ic="aic",approximation = F)
?auto.arima
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.csv")
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.xlsx")
# fitting ARIMA model
data <- readxl::read_xlsx(path = "female_births_california.xlsx")
data
class(data)
# fitting ARIMA model
data <- as.data.frame(readxl::read_xlsx(path = "female_births_california.xlsx"))
head(data)
class(data$Date)
tail(data)
plot(data$Date,data$`Daily total female births in California, 1959`,
main = "female births california")
plot(data$Date,data$`Daily total female births in California, 1959`, type = "l",
main = "female births california")
data <- as.data.frame(readxl::read_xlsx(path = "female_births_california.xlsx"))
plot(data$Date,data$`Daily total female births in California, 1959`, type = "l",
main = "female births california")
?Box.test
head(data$`Daily total female births in California, 1959`)
data$`Daily total female births in California, 1959`
numBirths <- data$`Daily total female births in California, 1959`
length(numBirths)
log(length(numBirths))
# test if autocorrelation exist for different lags
Box.test(numBirths,lag = log(length(numBirths)))
plot(data$Date,data$`Daily total female births in California, 1959`, type = "l",
main = "female births california")
ng
plot(x=data$Date,y=diff(numBirths),type = "l",
main="female births after differencing")
plot(x=data$Date[1:364],y=diff(numBirths),type = "l",
main="female births after differencing")
par(mfrow=c(2,1))
plot(data$Date,data$`Daily total female births in California, 1959`, type = "l",
main = "female births california")
numBirths <- data$`Daily total female births in California, 1959`
# test if autocorrelation exist for different lags
Box.test(numBirths,lag = log(length(numBirths)))
# null hypothesis is that no auto correlation exist for any lag,
# as we see p-value <0.05 so there exist autocorrelation for any lag
# we can see from plot that there exist trend in the time series so we take differencing
plot(x=data$Date[1:364],y=diff(numBirths),type = "l",
main="female births after differencing")
par(mfrow=c(2,1))
acfBirth <- acf(diff(numBirths), main="acf of diff-births", col="red",lwd=2)
pacfBirth <- acf(diff(numBirths),type = "partial",main="pacf of diff-births",
col="green",lwd=2)
# again doing box.test
Box.test(diff(numBirths), lag = log(length(numBirths)))
# fitting various ARIMA models
model1 <- arima(numBirths, order = c(0,1,1))
model1 <- arima(numBirths, order = c(0,1,1))
SSE1 <- sum(model1$residuals^2)
model1Test <- Box.test(model1$residuals, lag = log(length(model1$residuals)))
SSE1
model1Test
model2 <- arima(numBirths, order = c(0,1,2))
SSE2 <- sum(model2$residuals^2)
model2Test <- Box.test(model2$residuals, lag = log(length(model2$residuals)))
model3 <- arima(numBirths, order = c(7,1,1))
SSE2 <- sum(model3$residuals^2)
model3Test <- Box.test(model3$residuals, lag = log(length(model3$residuals)))
model1 <- arima(numBirths, order = c(0,1,1))
SSE1 <- sum(model1$residuals^2)
model1Test <- Box.test(model1$residuals, lag = log(length(model1$residuals)))
model2 <- arima(numBirths, order = c(0,1,2))
SSE2 <- sum(model2$residuals^2)
model2Test <- Box.test(model2$residuals, lag = log(length(model2$residuals)))
model3 <- arima(numBirths, order = c(7,1,1))
SSE2 <- sum(model3$residuals^2)
model3Test <- Box.test(model3$residuals, lag = log(length(model3$residuals)))
model4 <- arima(numBirths, order = c(7,1,2))
SSE2 <- sum(model4$residuals^2)
model4Test <- Box.test(model4$residuals, lag = log(length(model4$residuals)))
df<-data.frame(row.names=c('AIC', 'SSE', 'p-value'), c(model1$aic, SSE1, model1Test$p.value),
c(model2$aic, SSE2, model2Test$p.value), c(model3$aic, SSE3, model3Test$p.value),
c(model4$aic, SSE4, model4Test$p.value))
colnames(df)<-c('Arima(0,1,1)','Arima(0,1,2)', 'Arima(7,1,1)', 'Arima(7,1,2)')
# fitting various ARIMA models
model1 <- arima(numBirths, order = c(0,1,1))
SSE1 <- sum(model1$residuals^2)
model1Test <- Box.test(model1$residuals, lag = log(length(model1$residuals)))
model2 <- arima(numBirths, order = c(0,1,2))
SSE2 <- sum(model2$residuals^2)
model2Test <- Box.test(model2$residuals, lag = log(length(model2$residuals)))
model3 <- arima(numBirths, order = c(7,1,1))
SSE3 <- sum(model3$residuals^2)
model3Test <- Box.test(model3$residuals, lag = log(length(model3$residuals)))
model4 <- arima(numBirths, order = c(7,1,2))
SSE4 <- sum(model4$residuals^2)
model4Test <- Box.test(model4$residuals, lag = log(length(model4$residuals)))
df<-data.frame(row.names=c('AIC', 'SSE', 'p-value'), c(model1$aic, SSE1, model1Test$p.value),
c(model2$aic, SSE2, model2Test$p.value), c(model3$aic, SSE3, model3Test$p.value),
c(model4$aic, SSE4, model4Test$p.value))
colnames(df)<-c('Arima(0,1,1)','Arima(0,1,2)', 'Arima(7,1,1)', 'Arima(7,1,2)')
df
df
format(df,scientific=F)
?sarima
?sarima
??sarima
# here, we select model which has lowest AIC
# we select model = arima(0,1,2)
sarima(numBirths,0,1,2,0,0,0)
library(astsa)
# here, we select model which has lowest AIC
# we select model = arima(0,1,2)
sarima(numBirths,0,1,2,0,0,0)
model2
# Airplane_Crashes_and_Fatalities_Since_1908 dataset
GTemp <- read.csv("GlobalTemperatures.csv",stringsAsFactors = F, check.names = F)
GTemp["month"] <- month(as.POSIXlt(GTemp$dt, format="%Y-%m-%d"))
library(bev)
library(faraway)
library(astsa)
library(isdals) # bodyfat dataset
library(ppcor)
library(ggplot2)
library(forecast) # auto.arima()
library(lubridate)
library(dplyr)
# Airplane_Crashes_and_Fatalities_Since_1908 dataset
GTemp <- read.csv("GlobalTemperatures.csv",stringsAsFactors = F, check.names = F)
GTemp["month"] <- month(as.POSIXlt(GTemp$dt, format="%Y-%m-%d"))
library(bev)
library(faraway)
library(astsa)
library(isdals) # bodyfat dataset
library(ppcor)
library(ggplot2)
library(forecast) # auto.arima()
library(lubridate)
library(dplyr)
library(bev)
library(faraway)
library(astsa)
library(isdals) # bodyfat dataset
library(ppcor)
library(ggplot2)
library(forecast) # auto.arima()
library(lubridate)
library(dplyr)
library(bev)
library(faraway)
library(astsa)
library(isdals) # bodyfat dataset
library(ppcor)
library(ggplot2)
library(forecast) # auto.arima()
library(lubridate)
library(dplyr)
# Airplane_Crashes_and_Fatalities_Since_1908 dataset
GTemp <- read.csv("GlobalTemperatures.csv",stringsAsFactors = F, check.names = F)
GTemp["month"] <- month(as.POSIXlt(GTemp$dt, format="%Y-%m-%d"))
GTemp["year"] <- year(as.POSIXlt(GTemp$dt, format="%Y-%m-%d"))
# GTemp <- GTemp[, c("yearCrash","monthCrash","Fatalities")]
# GTemp <- as.data.frame(GTemp %>% group_by(yearCrash,monthCrash) %>% summarise(Fatalities=sum(Fatalities,na.rm = T)))
# xx <- as.data.frame(GTemp %>% group_by(year) %>% summarise(months=sum(month,na.rm = T)))
# taking data from 1960-1991 - only at these time data is uniformly present
GTemp <- GTemp[GTemp$year %in% as.character(1753:2015),]
GTemp["yearMonth"] <- c(1:length(GTemp$dt))
timeVec <-GTemp$yearMonth
landTemp <- GTemp$LandAverageTemperature
plot(x=timeVec,y=landTemp, main="GTemp monthly", col="red", lwd=2, type = "l")
# there is trend + seasonality in data
# making data stationary
logreturntemp <- diff(landTemp)
seasonaldiffTemp <- ts(diff(logreturntemp,12))
par(mfrow=c(3,1))
plot(seasonaldiffTemp, main="GTemp monthly", col="red", lwd=2, type = "l")
acfGTemp <- acf(seasonaldiffTemp, main= "ACF of GTemp monthly",col="blue", lwd=3 , lag.max = 60)
pacfGTemp <- acf(seasonaldiffTemp,type = "partial",main= "PACF of GTemp monthly",col="green",
lwd=3,lag.max = 60 )
# plots shows following
# MA = 1
# SMA=1 at lag = 12
# AR=1
# SAR = 1
# d=1
# DD=1
Box.test(seasonaldiffTemp,lag=log(length(seasonaldiffTemp))) # we reject null hypothesis
?auto.arima
autoArimaModelTemp <- auto.arima(seasonaldiffTemp,d=1,D=1, max.p = 2, max.q = 2,max.P = 2,max.Q = 2,
max.order = 7,stationary = F,seasonal = T,ic="aic")
autoArimaModelTemp
?auto.arima
autoArimaModelTemp <- auto.arima(landTemp,d=1,D=1, max.p = 2, max.q = 2,max.P = 2,max.Q = 2,
max.order = 7,stationary = F,seasonal = T,ic="aic",trace = T)
forecast(autoArimaModelTemp)
plot(forecast(autoArimaModelTemp))
class(forecast(autoArimaModelTemp))
forecastTemp <- forecast(autoArimaModelTemp)
forecastTemp$model
forecastTemp$level
forecastTemp$mean
length(landTemp)
landTemp <- append(landTemp,forecastTemp$mean)
length(landTemp)
tail(landTemp,25)
plot(ts(tail(landTemp,25)), main="forecast of temp",col="blue", lwd=1.5,type="l")
plot(ts(tail(landTemp,25)), main="forecast of temp",col="blue", lwd=1.5,type="l")
plot(ts(tail(landTemp,60)), main="forecast of temp",col="blue", lwd=1.5,type="l")
